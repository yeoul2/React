import { useState, useEffect, useRef, useCallback } from "react";
import axios from "axios"; // 🔹 백엔드 API 호출을 위한 axios 추가
import { fetchAutocomplete } from "../../services/googlePlacesService"; // ✅ 구글 플레이스 API 유지 (검색 기능에 필요!)

const useTravelSearch = () => {
  // ✅ 필요한 상태 변수만 유지
  const [isLoggedIn, setIsLoggedIn] = useState(false); // 로그인 여부
  const [currentUser, setCurrentUser] = useState(null); // 현재 사용자 정보
  const [searchTerm, setSearchTerm] = useState(""); // 검색어 상태
  const [showResults, setShowResults] = useState(false); // 검색 결과 표시 여부
  const [selectedCountry, setSelectedCountry] = useState(""); // 🔹 나라 선택 (유지)
  const [selectedCity, setSelectedCity] = useState(""); // 선택된 도시
  const [recentSearches, setRecentSearches] = useState(
    JSON.parse(localStorage.getItem("recentSearches")) || []
  ); // 최근 검색어 목록
  const [popularDestinations, setPopularDestinations] = useState([]); // 인기 여행지 목록

  const searchResultsRef = useRef(null); // 🔹 검색창 외부 클릭 감지를 위한 Ref

  // 📌 로그인 상태 감지
  const checkLoginStatus = useCallback(() => {
    const accessToken = localStorage.getItem("accessToken");
    const userId = localStorage.getItem("user_id");
    if (accessToken && userId) {
      setIsLoggedIn(true);
      setCurrentUser({ id: userId });
    } else {
      setIsLoggedIn(false);
      setCurrentUser(null);
    }
  }, []);

  useEffect(() => {
    checkLoginStatus(); // ✅ 로그인 상태 확인
    window.addEventListener("storage", checkLoginStatus); // ✅ 로그인 변경 감지

    return () => window.removeEventListener("storage", checkLoginStatus);
  }, [checkLoginStatus]);

  // 📌 인기 여행지 불러오기 (백엔드 API 연동)
  useEffect(() => {
    const fetchPopularDestinations = async () => {
      try {
        const response = await axios.get("/api/search/popular");
        if (response.data?.length > 0) {
          setPopularDestinations(response.data);
        }
      } catch (error) {
        console.error("❌ 인기 여행지 불러오기 오류:", error);
      }
    };

    fetchPopularDestinations();
  }, []);

  /**
   * 📌 하나의 함수로 국가, 도시, 상세 주소를 구분하여 검색하는 공통 함수
   *
   * @param {string} query 사용자가 입력한 검색어
   * @param {string} type 검색 타입: 'regions' | 'cities' | 'geocode'
   * @param {function} setSuggestions 결과값을 상태에 저장할 함수 (예: setSuggestedCountries)
   */
  const fetchPlaces = useCallback(async (query, type, setSuggestions) => {
    if (!query) return;

    try {
      const results = await fetchAutocomplete(query, type); // ✅ googlePlacesApi.js에서 가져오기
      setSuggestions(results);
    } catch (error) {
      console.error("Google Places API 장소 검색 오류:", error);
    }
  }, []);

  // 📌 검색어 입력 시 자동완성 처리
  const handleCountryChange = async (e) => {
    const query = e.target.value;
    setSearchTerm(query); // 🔹 사용자가 입력한 검색어를 상태에 저장
    setShowResults(true); // 🔹 자동완성 목록을 화면에 표시

    try {
      const results = await fetchAutocomplete(query, "regions"); // ✅ API 호출 변경
      // 여기서 자동완성 결과를 처리할 수 있는 로직을 추가 (예: 화면에 표시)
    } catch (error) {
      console.error("API 호출 오류:", error);
    }
  };

  // 📌 나라 검색 (구글 플레이스 API 활용)
  const handleCountrySearch = async (query) => {
    if (!query) return;
    setSearchTerm(query);
    setShowResults(true);

    try {
      const results = await fetchAutocomplete(query, "regions"); // 🔹 구글 API에서 나라 검색 결과 가져옴
      console.log("🔍 나라 검색 결과:", results);
    } catch (error) {
      console.error("❌ 나라 검색 실패:", error);
    }
  };

  // 📌 도시 선택 핸들러 (검색어 및 UI 업데이트)
  const handleCitySelect = async (city, country) => {
    const fullCity = `${city}, ${country}`;
    setSelectedCity(fullCity);
    setSearchTerm(fullCity);
    setShowResults(false);
    updateRecentSearches(fullCity);

    if (!isLoggedIn) return;

    try {
      await axios.post("/api/search/save", {
        userId: currentUser.id,
        searchTerm: fullCity,
      });
    } catch (error) {
      console.error("❌ 검색어 저장 실패:", error);
    }
  };

  // 📌 최근 검색어 업데이트 (최대 10개 저장)
  const updateRecentSearches = (search) => {
    if (!isLoggedIn) return;

    setRecentSearches((prev) => {
      const updated = [search, ...prev.filter((item) => item !== search)].slice(
        0,
        10
      );
      localStorage.setItem(
        `recentSearches_${currentUser.id}`,
        JSON.stringify(updated)
      );
      return updated;
    });
  };

  // 📌 검색어 초기화
  const handleClearSearch = () => {
    setSearchTerm("");
    setShowResults(false);
    setSelectedCity("");
  };

  // 📌 최근 검색어 삭제 기능
  const handleRemoveRecentSearch = (searchToRemove) => {
    const updatedSearches = recentSearches.filter(
      (search) => search !== searchToRemove
    );
    setRecentSearches(updatedSearches);

    if (isLoggedIn) {
      localStorage.setItem(
        `recentSearches_${currentUser.id}`,
        JSON.stringify(updatedSearches)
      );
    } else {
      localStorage.setItem("recentSearches", JSON.stringify(updatedSearches));
    }
  };

  // 📌 인기 여행지 선택 핸들러
  const handlePopularDestinationSelect = async (destination) => {
    setSearchTerm(destination);
    setSelectedCity(destination);
    setShowResults(false);
    updateRecentSearches(destination);

    if (!isLoggedIn) return;

    try {
      await axios.post("/api/search/save", {
        userId: currentUser.id,
        searchTerm: destination,
      });
    } catch (error) {
      console.error("❌ 검색어 저장 실패:", error);
    }
  };

  // 📌 검색창 외부 클릭 시 검색 결과 닫기
  const handleClickOutside = (event) => {
    if (
      searchResultsRef.current &&
      !searchResultsRef.current.contains(event.target)
    ) {
      setShowResults(false);
    }
  };

  return {
    isLoggedIn,
    currentUser,
    searchTerm,
    showResults,
    selectedCountry, // ✅ 나라 선택 상태 유지
    selectedCity,
    recentSearches,
    popularDestinations,
    searchResultsRef,
    handleCountrySearch, // ✅ 나라 검색 기능 추가
    handleCitySelect,
    handleClearSearch,
    handleRemoveRecentSearch,
    handlePopularDestinationSelect,
    handleClickOutside,
  };
};

export default useTravelSearch;
