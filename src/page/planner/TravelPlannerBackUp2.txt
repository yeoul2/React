import React, { useState, useEffect } from "react";
import { GoogleMap, LoadScript } from "@react-google-maps/api";
import Modal from "react-modal";
import { FaTrashAlt, FaSave } from "react-icons/fa";
import axios from "axios"; // ✅ 일정 저장 및 AI 연동을 위한 API

// 📌 모달 스타일 설정
const modalStyles = {
  overlay: { backgroundColor: "rgba(0, 0, 0, 0.5)" },
  content: {
    width: "60%",
    height: "60%",
    margin: "auto",
    padding: "20px",
    borderRadius: "10px",
  },
};

// 📌 지도 크기 설정
const containerStyle = {
  width: "100%",
  height: "500px",
  borderRadius: "10px",
};

// 📌 기본 지도 설정 (서울)
const defaultCenter = {
  lat: 37.5665,
  lng: 126.978,
  zoom: 12,
};

const PlannerPage = () => {
  const [plans, setPlans] = useState([]); // AI가 만든 일정 목록
  const [selectedPlanIndex, setSelectedPlanIndex] = useState(null); // 현재 보고 있는 일정
  const [selectedComparisons, setSelectedComparisons] = useState([]); // 비교 선택 일정
  const [isModalOpen, setIsModalOpen] = useState(false); // 비교 모달 상태

  // 📌 AI를 통해 일정 생성 (현재 더미 데이터 처리, 이후 AI API 연동 가능)
  const handleGeneratePlan = async () => {
    console.log("AI 요청 시작..."); // ✅ AI 연동 확인 로그

    try {
      // TODO: 실제 AI API 연동
      // const response = await axios.post("/api/ai/generate-plan", { userId: "사용자 ID" });
      // const aiPlan = response.data;

      // ✅ 현재는 더미 데이터 (AI 응답이 오면 해당 데이터로 변경 가능)
      const aiPlan = {
        id: Date.now(),
        day: `DAY ${plans.length + 1}`,
        activities: [
          { time: "09:00", title: "🏰 명동 관광", desc: "쇼핑과 현지 음식 체험" },
          { time: "14:00", title: "🏛️ 경복궁", desc: "한국의 대표적인 고궁 관람" },
          { time: "18:00", title: "🌆 광화문 광장", desc: "야경 감상 및 저녁 식사" },
        ],
      };

      setPlans((prevPlans) => {
        const updatedPlans = [...prevPlans, aiPlan];
        setSelectedPlanIndex(updatedPlans.length - 1); // ✅ 추가된 일정 자동 선택
        return updatedPlans;
      });
    } catch (error) {
      console.error("AI 요청 실패:", error);
      alert("AI 일정 생성 중 오류가 발생했습니다.");
    }
  };

  // 📌 일정 버튼 클릭 시 해당 일정으로 변경 (체크박스 클릭 시 일정 변경되지 않도록 수정)
  const handleSelectPlan = (index, event) => {
    if (event.target.type === "checkbox") {
      return;
    }
    setSelectedPlanIndex(index);
  };

  // 📌 일정 비교 선택 토글
  const toggleSelectComparison = (id) => {
    setSelectedComparisons((prev) => {
      if (prev.includes(id)) return prev.filter((planId) => planId !== id);
      if (prev.length < 3) return [...prev, id];
      return prev;
    });
  };

  return (
    <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8 py-8 mt-16">
      {/* 📌 AI 추천 일정 생성 버튼 */}
      <div className="text-center mb-6">
        <button
          onClick={handleGenerateAIPlan}
          className="bg-orange-500 text-white px-4 py-2 rounded-lg text-lg font-bold shadow-md"
        >
          AI 추천 일정 생성
        </button>
      </div>

      {/* 📌 일정 선택 및 비교 버튼 */}
      <div className="flex items-center justify-between mb-4 gap-4">
        {/* ✅ 일정 선택 버튼 + 체크박스 */}
        <div className="flex gap-2 flex-wrap">
          {plans.map((plan, index) => (
            <button
              key={plan.id}
              className={`flex items-center gap-2 px-4 py-2 text-sm rounded-md w-32 justify-between ${selectedPlanIndex === index ? "bg-orange-500 text-white" : "bg-gray-100 hover:bg-gray-200 text-gray-700"
                }`}
              onClick={(e) => handleSelectPlan(index, e)}
            >
              <span>일정 {index + 1}</span>
              <input
                type="checkbox"
                checked={selectedComparisons.includes(plan.id)}
                onChange={() => toggleSelectComparison(plan.id)}
                className="cursor-pointer"
              />
            </button>
          ))}
        </div>

        {/* ✅ 비교, 삭제, 저장 버튼 */}
        <div className="flex gap-2">
          <button
            onClick={openModal}
            disabled={selectedComparisons.length < 2}
            className={`px-4 py-2 text-sm rounded-md ${selectedComparisons.length >= 2 ? "bg-orange-500 text-white" : "bg-gray-400 text-gray-200 cursor-not-allowed"
              }`}
          >
            비교하기
          </button>
          <button onClick={handleDeletePlan} className="px-4 py-2 text-sm rounded-md bg-red-500 text-white flex items-center gap-1">
            <FaTrashAlt /> 삭제
          </button>
          <button onClick={() => handleSave(plans[selectedPlanIndex])} className="px-4 py-2 text-sm rounded-md bg-blue-500 text-white flex items-center gap-1">
            <FaSave /> 저장하기
          </button>
        </div>
      </div>

      {/* 📌 AI 추천 일정 (일정 목록 + 지도) */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
        {/* ✅ 왼쪽: AI 추천 일정 목록 */}
        <div className="p-4 bg-white shadow-md rounded-lg">
          <h2 className="text-2xl font-bold mb-4">AI 추천 여행 일정</h2>
          {selectedPlanIndex !== null &&
            Array.isArray(plans) &&
            plans[selectedPlanIndex]?.days &&
            plans[selectedPlanIndex].days.length > 0 ? (
            plans[selectedPlanIndex].days.map((day, index) => (
              <div key={day.id || index} className="border-l-4 border-orange-300 pl-4 mb-4">
                {/* 🔹 DAY 제목 */}
                <h3 className="text-lg font-semibold mb-2">{day.day}</h3>
                {Array.isArray(day.activities) ? (
                  day.activities.map((activity, idx) => (
                    <div key={idx} className="flex items-start gap-3">
                      <div className="w-24 text-sm text-white font-medium bg-orange-300 rounded px-2 py-1">{activity.time}</div>
                      <div>
                        <p className="font-medium">{activity.title}</p>
                        <p className="text-sm text-gray-600">{activity.desc}</p>
                      </div>
                    </div>
                  ))
                ) : (
                  <p className="text-gray-500">활동 정보가 없습니다.</p>
                )}
              </div>
            ))
          ) : (
            <p className="text-gray-500">선택된 일정이 없습니다.</p>
          )}
        </div>

        {/* ✅ 오른쪽: 지도 */}
        <div className="p-4 bg-white shadow-md rounded-lg">
          <h2 className="text-2xl font-bold mb-4">이동 경로</h2>
          {Array.isArray(plans) && plans.length > 0 && (
            <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_KEY || ""}>
              <GoogleMap mapContainerStyle={containerStyle} center={mapCenter} zoom={zoomLevel}>
                {/* ✅ 이동 경로 표시 */}
                {selectedDayIndex !== null &&
                  Array.isArray(plans) &&
                  plans[selectedPlanIndex]?.days?.[selectedDayIndex]?.coordinates?.length > 0 && (
                    <Polyline
                      path={plans[selectedPlanIndex].days[selectedDayIndex].coordinates}
                      options={{
                        strokeColor: "#FF5733",
                        strokeOpacity: 0.8,
                        strokeWeight: 3,
                      }}
                    />
                  )}

                {/* ✅ 마커 표시 */}
                {selectedDayIndex !== null &&
                  plans[selectedPlanIndex]?.days[selectedDayIndex]?.coordinates &&
                  plans[selectedPlanIndex].days[selectedDayIndex].coordinates.map((coord, index) => (
                    <Marker key={index} position={coord} />
                  ))}
              </GoogleMap>
            </LoadScript>
          )}
        </div>
      </div>

      {/* 📌 비교 모달 */}
      <Modal isOpen={isModalOpen} onRequestClose={closeModal} style={modalStyles}>
        <h2 className="text-2xl font-bold mb-4">일정 비교</h2>
        <div className="grid grid-cols-3 gap-4">
          {selectedComparisons.map((id) => {
            const plan = plans.find((p) => p.id === id);
            return plan ? (
              <div key={id} className="border p-4 rounded-lg">
                <h3 className="text-lg font-semibold">{plan.day}</h3>
                <ul>
                  {plan.activities.map((activity, idx) => (
                    <li key={idx}>{activity.time} - {activity.title}</li>
                  ))}
                </ul>
              </div>
            ) : (
              <p className="text-gray-500">일정을 찾을 수 없습니다.</p>
            );
          })}
        </div>
        <div className="flex justify-end mt-4">
          <button onClick={closeModal} className="mt-4 px-6 py-2 bg-orange-600 text-white rounded-lg">
            확인
          </button>
        </div>
      </Modal>
    </main>
  );
};

export default PlannerPage;
